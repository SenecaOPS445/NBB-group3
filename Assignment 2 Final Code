#!/usr/bin/python3

import sys
import os

LOG_FILE = "/var/log/secure"
REPORT_FILE = "sudo_report.txt"

# Function Definitions
def read_log_file(filename):
    """Function to read and return contents of log file"""
    try:
        log_file = open(filename, "r")
        contents = log_file.readlines()
        log_file.close()
        return contents
    except FileNotFoundError:
        print("Error: Cannot find log file:", filename)
        return None
    except PermissionError:
        print("Error: No permission to read file:", filename)
        return None

def find_successful_logins(log_lines):
    """Function to find successful SSH logins"""
    logins = []
    
    if log_lines is None:
        return logins
        
    for line in log_lines:
        if "Accepted password for" in line:
            parts = line.split()
            user = parts[parts.index("for") + 1]
            ip = parts[parts.index("from") + 1]
            logins.append([user, ip])
    return logins

def find_failed_logins(log_lines):
    """Function to find failed login attempts"""
    failed = []
    
    if log_lines is None:
        return failed
        
    for line in log_lines:
        if "Failed password for" in line:
            parts = line.split()
            user = parts[parts.index("for") + 1]
            ip = parts[parts.index("from") + 1]
            failed.append([user, ip])
    return failed

def get_most_frequent_sudo_commands(log_lines):
    """Function to find the most frequently run sudo commands"""
    command_frequency = {}
    if log_lines is None:
        return command_frequency
    
    for line in log_lines:
        if "COMMAND=" in line:
            command = line.split("COMMAND=")[1].strip()
            command_frequency[command] = command_frequency.get(command, 0) + 1
    
    commands_report = [
        f"{count} {command}\n" for command, count in sorted(command_frequency.items(), key=lambda x: x[1], reverse=True)
    ]
    
    return commands_report

def append_to_report(header, content_list):
    """Function to append header and content to the report"""
    print(header)
    for content in content_list:
        print(content)

def print_report(logins, failed, commands_report):
    """Function to print the complete analysis report"""
    print("\n====== System Log Analysis Report ======")

    # Print successful logins
    print("\n=== 1. Successful SSH Logins ===")
    if len(logins) == 0:
        print("No successful logins found.")
    else:
        users = {}
        for login in logins:
            user = login[0]
            ip = login[1]
            if user not in users:
                users[user] = []
            if ip not in users[user]:
                users[user].append(ip)
                
        for user in users:
            print(f"\nUser: {user}")
            print("Login IPs:")
            for ip in users[user]:
                print(f"  - {ip}")

    # Print failed login attempts
    print("\n=== 2. Failed Login Attempts ===")
    if len(failed) == 0:
        print("No failed login attempts found.")
    else:
        ips = {}
        for attempt in failed:
            ip = attempt[1]
            if ip not in ips:
                ips[ip] = 0
            ips[ip] += 1
            
        print("\nAttempts by IP:")
        for ip in ips:
            print(f"IP: {ip} - {ips[ip]} attempts")

    # Print most frequently run sudo commands
    print("\n=== 3. Most Frequently Run Sudo Commands ===")
    if len(commands_report) == 0:
        print("No sudo commands found.")
    else:
        for command in commands_report:
            print(command)

def main():
    # Check if log file provided as argument
    if len(sys.argv) > 1:
        log_file = sys.argv[1]
    else:
        log_file = "/var/log/secure"

    # Read log file
    print(f"Analyzing log file: {log_file}")
    log_contents = read_log_file(log_file)
    
    # Analyze logs
    successful_logins = find_successful_logins(log_contents)
    failed_logins = find_failed_logins(log_contents)
    most_frequent_commands = get_most_frequent_sudo_commands(log_contents)
    
    # Print comprehensive report
    print_report(successful_logins, failed_logins, most_frequent_commands)

if _name_ == "_main_":
    main()
